// This file is part of the Godot Orchestrator project.
//
// Copyright (c) 2023-present Crater Crash Studios LLC and its contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//		http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#include "api/extension_db.h"

// THIS FILE IS GENERATED. EDITS WILL BE LOST.

namespace godot
{
    ExtensionDB* ExtensionDB::_singleton = nullptr;

    namespace internal
    {
        MethodInfo _make_method(const StringName& p_name, int32_t p_flags, Variant::Type p_rtype, const std::vector<PropertyInfo>& p_args, bool p_nil_is_variant = false)
        {
            int32_t return_flags = PROPERTY_USAGE_DEFAULT;
            if (p_nil_is_variant)
                return_flags |= PROPERTY_USAGE_NIL_IS_VARIANT;

            MethodInfo mi;
            mi.name = p_name;
            mi.flags = p_flags;
            mi.return_val.type = p_rtype;
            mi.return_val.usage = return_flags;
            mi.arguments.insert(mi.arguments.begin(), p_args.begin(), p_args.end());
            return mi;
        }

        String _resolve_enum_prefix(const Vector<EnumValue>& p_values)
        {
            if (p_values.size() == 0)
                return {};

            String prefix = p_values[0].name;
            // Some Godot enums are prefixed with a trailing underscore, those are our target.
            if (!prefix.contains("_"))
                return {};

            for (const EnumValue& value : p_values)
            {
                while (value.name.find(prefix) != 0)
                {
                    prefix = prefix.substr(0, prefix.length() - 1);
                    if (prefix.is_empty())
                        return {};
                }
            }
            return prefix;
        }

        bool _is_enum_values_upper_cased(const EnumInfo& p_enum)
        {
            return p_enum.name.match("EulerOrder");
        }

        void _sanitize_enum(EnumInfo& p_enum)
        {
            const bool is_key = p_enum.name.match("Key");
            const bool is_error = p_enum.name.match("Error");
            const bool is_method_flags = p_enum.name.match("MethodFlags");
            const bool is_upper = _is_enum_values_upper_cased(p_enum);

            const String prefix = _resolve_enum_prefix(p_enum.values);
            for (EnumValue& value : p_enum.values)
            {
                value.friendly_name = value.name.replace(prefix, "").capitalize();

                // Handle unique fix-ups for enum friendly names
                if (is_key && value.friendly_name.begins_with("Kp "))
                    value.friendly_name = value.friendly_name.substr(3, value.friendly_name.length()) + " (Keypad)";
                else if(is_key && value.friendly_name.begins_with("F "))
                    value.friendly_name = value.friendly_name.replace(" ", "");
                else if (is_error && value.friendly_name.begins_with("Err "))
                    value.friendly_name = value.friendly_name.substr(4, value.friendly_name.length());
                else if (is_method_flags && value.name.match("METHOD_FLAGS_DEFAULT"))
                    value.friendly_name = ""; // forces it to be skipped by some nodes (same as normal)

                if (is_upper)
                    value.friendly_name = value.friendly_name.to_upper();
            }
        }

        void _sanitize_enums(Vector<EnumInfo>& p_enums)
        {
            for (EnumInfo& ei : p_enums)
                _sanitize_enum(ei);
        }

@godot_extension_db_cpp@
    }

    ExtensionDB::ExtensionDB() { _singleton = this; }
    ExtensionDB::~ExtensionDB() { _singleton = nullptr; }

    PackedStringArray ExtensionDB::get_builtin_type_names()
    {
        return ExtensionDB::_singleton->_builtin_type_names;
    }

    BuiltInType ExtensionDB::get_builtin_type(const StringName& p_name)
    {
        return ExtensionDB::_singleton->_builtin_types[p_name];
    }

    BuiltInType ExtensionDB::get_builtin_type(Variant::Type p_type)
    {
        return ExtensionDB::_singleton->_builtin_types[ExtensionDB::_singleton->_builtin_types_to_name[p_type]];
    }

    PackedStringArray ExtensionDB::get_global_enum_names()
    {
        return ExtensionDB::_singleton->_global_enum_names;
    }

    PackedStringArray ExtensionDB::get_global_enum_value_names()
    {
        return ExtensionDB::_singleton->_global_enum_value_names;
    }

    EnumInfo ExtensionDB::get_global_enum(const StringName& p_name)
    {
        return ExtensionDB::_singleton->_global_enums[p_name];
    }

    EnumInfo ExtensionDB::get_global_enum_by_value(const StringName& p_name)
    {
        for (const KeyValue<StringName, EnumInfo>& E : ExtensionDB::_singleton->_global_enums)
            for (const EnumValue& ev : E.value.values)
                if (ev.name.match(p_name))
                    return E.value;
        return {};
    }

    EnumValue ExtensionDB::get_global_enum_value(const StringName& p_name)
    {
        for (const KeyValue<StringName, EnumInfo>& E : ExtensionDB::_singleton->_global_enums)
            for (const EnumValue& ev : E.value.values)
                if (ev.name.match(p_name))
                    return ev;
        return {};
    }

    PackedStringArray ExtensionDB::get_math_constant_names()
    {
        return ExtensionDB::_singleton->_math_constant_names;
    }

    ConstantInfo ExtensionDB::get_math_constant(const StringName& p_name)
    {
        return ExtensionDB::_singleton->_math_constants[p_name];
    }

    PackedStringArray ExtensionDB::get_function_names()
    {
        return ExtensionDB::_singleton->_function_names;
    }

    FunctionInfo ExtensionDB::get_function(const StringName& p_name)
    {
        return ExtensionDB::_singleton->_functions[p_name];
    }

    bool ExtensionDB::is_class_enum_bitfield(const StringName& p_class_name, const String& p_enum_name)
    {
        if (ExtensionDB::_singleton->_classes.has(p_class_name))
            return ExtensionDB::_singleton->_classes[p_class_name].bitfield_enums.has(p_enum_name);
        return false;
    }

    PackedStringArray ExtensionDB::get_static_function_names(const StringName& p_class_name)
    {
        PackedStringArray values;
        if (ExtensionDB::_singleton->_classes.has(p_class_name))
        {
            for (const KeyValue<StringName, int64_t>& E : ExtensionDB::_singleton->_classes[p_class_name].static_function_hashes)
                values.push_back(E.key);
        }
        return values;
    }

    int64_t ExtensionDB::get_static_function_hash(const StringName& p_class_name, const StringName& p_function_name)
    {
        if (ExtensionDB::_singleton->_classes.has(p_class_name))
        {
            if (ExtensionDB::_singleton->_classes[p_class_name].static_function_hashes.has(p_function_name))
                return ExtensionDB::_singleton->_classes[p_class_name].static_function_hashes[p_function_name];
        }
        return 0;
    }
}

